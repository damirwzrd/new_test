import logging
from uuid import uuid4
from telegram import Update, LabeledPrice
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    PreCheckoutQueryHandler,
    filters,
)
from flask import Flask, request
import threading
import asyncio
import hashlib

# üîê –ó–∞–º–µ–Ω–∏—Ç–µ —Å–≤–æ–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = "8057853656:AAEbcvA5wrfm980x3G1Ldn419MiAsoBQewQ"
PROVIDER_TOKEN = "6450350554:LIVE:553348"
SECRET_KEY = "4wCFV3XRNYXI6bOF"  # –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ pg_sig

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
flask_app = Flask(__name__)

@flask_app.route("/")
def index():
    return "OK"

@flask_app.route("/result", methods=["POST"])
def handle_callback():
    data = request.form.to_dict()
    received_sig = data.get("pg_sig", "")
    script_name = "result"  # –Ω–µ –≤–∫–ª—é—á–∞—è .php

    # –£–¥–∞–ª–∏–º pg_sig –ø–µ—Ä–µ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
    data.pop("pg_sig", None)

    # –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    sorted_values = [data[key] for key in sorted(data)]
    base_string = ";".join([script_name] + sorted_values + [SECRET_KEY])
    calculated_sig = hashlib.md5(base_string.encode()).hexdigest()

    if calculated_sig == received_sig:
        logger.info("‚úÖ –ü–æ–¥–ø–∏—Å—å –≤–µ—Ä–Ω–∞: %s", data)
        return "OK"
    else:
        logger.warning("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å. –ü–æ–ª—É—á–µ–Ω–æ: %s, –û–∂–∏–¥–∞–ª–æ—Å—å: %s", received_sig, calculated_sig)
        return "invalid signature", 400

def run_flask():
    flask_app.run(host="0.0.0.0", port=8000)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ /pay —á—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ FreedomPay.")

# –ö–æ–º–∞–Ω–¥–∞ /pay
async def pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payload = f"freedompay-test-{uuid4()}"
    prices = [LabeledPrice("–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä", 1000 * 100)]  # 1000 —Å–æ–º–æ–≤
    await context.bot.send_invoice(
        chat_id=update.effective_chat.id,
        title="FreedomPay –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞",
        description="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ FreedomPay",
        payload=payload,
        provider_token=PROVIDER_TOKEN,
        currency="KGS",
        prices=prices,
        need_name=True,
        is_flexible=False,
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã
async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    if not query.invoice_payload.startswith("freedompay-test-"):
        await query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ payload.")
    else:
        await query.answer(ok=True)
        logger.info("‚úÖ PreCheckout –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    # –§–æ–Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()

    # Telegram-–±–æ—Ç
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("pay", pay))
    application.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))

    await application.run_polling()

import nest_asyncio
import asyncio

if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())

